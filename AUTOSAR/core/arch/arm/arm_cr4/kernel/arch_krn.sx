/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

#define _ASSEMBLER_
//#include "kernel_offset.h"
#include "asm_offset.h"
#include "arch_stack.h"

.extern Os_Sys

	.syntax unified
	.thumb

	.section .text

 	.global Irq_Handler
    .type	Irq_Handler, %function
    
	.global Svc_Handler
    .type	Svc_Handler, %function    

	.global Data_Exc_Handler
    .type	Data_Exc_Handler, %function
    
    .global Prefetch_Exc_Handler
    .type	Prefetch_Exc_Handler, %function
    
    .global Dummy_Irq
    .type	Dummy_Irq, %function        

    .global Undefined_Instruction_Handler
    .type	Undefined_Instruction_Handler, %function        
    
    
    


// Registers part of context.
#define REG_SAVE 		r0-r12
#define REG_SAVE_SC		r4-r8,r10,r11



// A data exception handler. This let us put a breakpoint and return to the place where the exception was caught.
// If DEBUG_EXCEPTIONS is off then just use the ordinary dummy irq.
Data_Exc_Handler: 
#ifdef CFG_ARM_CR4_DEBUG_EXCEPTIONS
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #8
	
	// Store return stuff on system mode's stack
	srsdb	sp!, #31 // 31 = System mode
	
	// Switch to system mode.
	cpsid 	i, #31  // 31 = system mode
	
	// Return using stuff from stack.
    rfeia	sp!
#else
	b 		Dummy_Irq
#endif

// A prefetch exception handler. This let us put a breakpoint and return to the place where the exception was caught.
// If DEBUG_EXCEPTIONS is off then just use the ordinary dummy irq.
Prefetch_Exc_Handler: 
#ifdef CFG_ARM_CR4_DEBUG_EXCEPTIONS	

	// Switch to system mode.
	cpsid 	i, #31  // 31 = system mode
	
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #4
	
	// Return to the place before the instruction that caused the interrupt.
    MOVS  PC, LR
    
#else
	b 		Dummy_Irq
#endif


	/* HW does:
	 * - CPSR copied to SPSR_IRQ
	 * - Swich to IRQ state (mode bits in CPSR)
	 * - LR set to return address
     */ 
Irq_Handler:
	// Setup return address. This requires subtraction from LR.
	sub		lr, lr, #4

Svc_Handler:

	// IMPROVEMENT: 
	// If memory protection is used we should probably check IRQ_SPSR
	// to what mode we came from and save the information there instead
	// of just assuming system mode here.. 

	// Store return LR_IRQ and CPSR on system mode's stack
	srsdb	sp!, #31 // 31 = System mode   (db=decrement before)
	
	// Switch to system mode, disable IRQ
	cpsid 	i, #31  // 31 = system mode 
    
    // Push registers on stack
	push    {REG_SAVE,lr}
	
	// Check if we should save VFP regs, s0-s31/d0-dx
	ldr      r4,=Os_Sys
	ldr      r5,[r4,#SYS_CURR_PCB_P]
	ldr      r4,[r5,#PCB_REGS]				// Get flags
	cmp 	 r4,#0
	beq 	 noCoRegs

	// Save S0-S31/D0-> registers  
	// TODO: Save more registers here? (status registers for float/simd, etc)
	vpush	{d0-d15}
	vmrs 	r4, FPSCR 	/* Read Floating-Point Status and Control Register */
	push	{r4}		/* push it */

	/* 	VMSR FPSCR, <Rt> ; Write Floating-Point Status and Control Register */
	sub.w   sp,sp,#C_SIZE
	mov.w   r4,#LCF_PATTERN
	
    b		cc		
	
noCoRegs:	
    sub.w   sp,sp,#C_SIZE
    mov.w   r4,#LC_PATTERN
cc:
    str     r4,[sp,#C_CONTEXT_OFFS]
    
    // Put stack as first arg to Irq_Entry    
    mov 	r0,sp			
    
	// When at interrupt nest count = 0, load interrupt stack    
	ldr      r4,=Os_Sys
	ldr      r5,[r4,#SYS_INT_NEST_CNT]
	cmp      r5, #0
	bgt      arggg
	ldr      sp,[r4,#SYS_INT_STACK]   
      
arggg:  
    bl      Irq_Entry
    mov     sp, r0			// pop from returned stack

    ldr     r6,[sp,#C_CONTEXT_OFFS]    
    cmp     r6,#LC_PATTERN
    beq     os_lc_restore
    cmp     r6,#LCF_PATTERN
    beq     os_lcf_restore
baaaad:	
	b	baaaad


/**
 * Os_ArchSetSpAndCall
 *
 * @param sp Pointer to the stack
 * @param f  Pointer to the function to call
 */

 	.global Os_ArchSetSpAndCall
 	.type	Os_ArchSetSpAndCall, %function
Os_ArchSetSpAndCall:
	mov.w	sp,r0
	mov.w	lr,r1
	bx		lr


/**
 * Os_ArchSwapContext
 *
 * @param r0 - pcb for old task
 * @param r1 - pcb for new task
 *
 * -------------- higher addr
 * r4-r8,etc
 * -------
 * 4 - Large or Small context indicator
 * 0 - ?
 * ----------
 *
 */
 	.global Os_ArchSwapContext
 	.type	Os_ArchSwapContext, %function
Os_ArchSwapContext:
	// Save function call registers
    push    {REG_SAVE_SC,lr}

	// Check if we should save VFP regs, s0-s31/d0-dx
	ldr      r4,[r0,#PCB_REGS]		// Get flags
	cmp 	 r4,#0
	beq 	 _noCoRegs
	
	vpush	{d8-d15}
	vmrs 	r4, FPSCR 	/* Read Floating-Point Status and Control Register */
	push	{r4}		/* push it */

	/* 	VMSR FPSCR, <Rt> ; Write Floating-Point Status and Control Register */
	sub.w   sp,sp,#C_SIZE
	mov.w   r4,#SCF_PATTERN		/* 	// Save small-context float indicator */
	
    b		_cc		

_noCoRegs:
	// Store the context frame
    sub.w   sp,sp,#C_SIZE

	// Save small-context indicator
    mov.w   r4,#SC_PATTERN
_cc:
    str     r4,[sp,#C_CONTEXT_OFFS]
	// ---> We have saved NVGPR+C
	
    // store old stack for old task
    mov.w	r4,sp
    str     r4,[r0,#PCB_STACK_CURR_P]

	// Flow down
	// R1 - new PCB
	.global Os_ArchSwapContextTo
	.type	Os_ArchSwapContextTo, %function
Os_ArchSwapContextTo:

    // Get stack for new task
    ldr 	r2,[r1,#PCB_STACK_CURR_P]
    mov.w 	sp,r2
    
	// Set new current pcb
    ldr     r5,= Os_Sys
    str     r1,[r5,#SYS_CURR_PCB_P]

	// Restore C context
    ldr     r6,[sp,#C_CONTEXT_OFFS]
    cmp     r6,#SC_PATTERN
    beq     os_sc_restore
    cmp     r6,#SCF_PATTERN
    beq     os_scf_restore
    cmp     r6,#LC_PATTERN
    beq     os_lc_restore
    cmp     r6,#LCF_PATTERN
    beq     os_lcf_restore
    
os_stack_problem:
// IMPROVEMENT: Jump to error handler
    b os_stack_problem


/* Restore the small context. Cases:
 *  - "Normal" context switch between processes.
 *  - We are in handler mode (this task preemted another task in interrupt
 *    context). We need to terminate handler mode ( set to LR=0xffff_fff9 )
 *    and
 */
os_sc_restore:
    add.w   sp,sp,#C_SIZE
    pop     {REG_SAVE_SC,lr}
    bx      lr

os_scf_restore:
    add.w   sp,sp,#C_SIZE
	pop		{r3}
	vmsr    FPSCR,r3	/* write FPSCR */
    vpop	{d8-d15}
    pop     {REG_SAVE_SC,lr}
    bx      lr



/* Restore the large context. Cases:
 *  1. Directly from Irq_Handler()
 *    (the preempted task got swapped in directly)
 *  2. The preempted task, got preemted by a task and
 *    we have already returned from handler mode.
 *
 * NOTE ! Only case 2 is covered here, case 1 is handled in Irq_Handler
 *        prologue
 */
 
os_lc_restore:
	/* Do a normal exception return */
    add.w   sp,sp,#C_SIZE
    
    // Restore registers
    pop     {REG_SAVE,lr}
    
	// Return using stuff from stack.
    rfeia	sp!

os_lcf_restore:
	/* Do a normal exception return */
    add.w   sp,sp,#C_SIZE

	pop		{r3}
	vmsr    FPSCR,r3
	vpop	{d0-d15}
    
    // Restore registers
    pop     {REG_SAVE,lr}

    rfeia	sp!
    
/* Interrupt routine used to catch unused interrupts and exceptions */
Dummy_Irq:
	/* Go back to sys mode for easier debugging.
	 Save link register*/
	mov   r3, lr
	/* We don't want to use the IRQ mode
	   so swich back to sys mode. */
	mov   r2,		#0xDF
    msr   cpsr_c,   r2
    /* Restore link register again */
    mov   lr, r3
	b Dummy_Irq
	



	 
Undefined_Instruction_Handler:
	 /* http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0363g/Beijdcef.html */
	 
	/* store LR and CPSR */ 
	srsdb	sp!, #27  // 27 = undefined
	push 	{r3,r4}		/* work regs */
	
	
	/* Grab instruction, violating instruction in r14 */
	sub 	r14,2
	str 	r14,[sp, #8]		/* Write over return address with new one */
	ldrh 	r3,[r14]

	/* Check for coprocessor insruction.. according to ARM that is 
	 * If bits [27:24] = b1110 or b110x, the instruction is a coprocessor instruction, 0x0e00/0x0c00/0x0d00 */
	and 	r3,r3,#0x0f00	
	cmp		r3,#0x0e00
	beq		isCop
	cmp		r3,#0x0c00
	beq		isCop
	cmp		r3,#0x0d00
	beq		isCop
	b 		noCop
isCop:
	/* Enable VFP, 
	 * see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0449b/ch02s01s02.html 
	 */	
	ldr 	r0, =(0xF << 20)
	mcr 	p15, 0, r0, c1, c0, 2
	
	mov 	r3, #0x40000000 
	vmsr 	FPEXC, r3
	
	/* Inform Os to save the VFP regs also. */
	ldr      r4,=Os_Sys
	ldr      r4,[r4,#SYS_CURR_PCB_P]
	mov		 r3,#1
	str      r3,[r4,#PCB_REGS]				// store in regs[0]
	
noCop:
	
	pop 	{r3,r4}
	rfeia	sp!	

	
	
	
	
	
	

