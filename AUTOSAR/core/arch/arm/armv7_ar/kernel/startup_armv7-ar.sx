/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/
        

#define _ASSEMBLER_
#include "asm_arm.h"

        
#if defined(__GNUC__)
	.org 0 
	.arm
	/******************************************************************************
	* Interrupt and exception vectors. Vectors start at addr 0x0.
	******************************************************************************/    
 	.section	.int_vecs,"ax",%progbits
 	
 	
#else
	PRESERVE8 {TRUE}
	AREA	||.int_vecs||, CODE, READONLY
	ARM
#endif


#if defined(__ARMCC_VERSION)
#define STACK_END		|Image$$STACK$$ZI$$Base|
#else 
#define STACK_END 		_estack
#endif

 	ASM_EXTERN(Irq_Handler)
	ASM_EXTERN(Svc_Handler)
	ASM_EXTERN(Data_Exc_Handler)
	ASM_EXTERN(Prefetch_Exc_Handler)
	ASM_EXTERN(Dummy_Irq)
	ASM_EXTERN(Undefined_Instruction_Handler)
	ASM_EXTERN(main)
	ASM_EXTERN(init)
	ASM_EXTERN(STACK_END)
	

		/* This is the reset handler. Since the CPU is in ARM mode when this instruction is executed
		   it has to be hard coded (otherwise it will compile wrong).
		   Instruction branches to address 0x22 while changing instruction mode to THUMB. */
        blx   Reset_Handler			/* Reset */
        b   Undefined_Instruction_Handler	/* Undefined instruction exception */
        b   Dummy_Irq        		/* Supervisor Call */
        b   Prefetch_Exc_Handler    /* Prefetch Abort  */
        b   Data_Exc_Handler   		/* Data Abort */
        b   Dummy_Irq          		/* Not Used */
        b   Irq_Handler        		/* IRQ */
	    b   Dummy_Irq        		/* FIQ */

		nop
		blx 	Reset_Handler      /* Branch to the real reset handler. */

#if defined(__GNUC__)
  	.syntax unified
	.thumb
	.global	Default_Handler
	
#else
	THUMB
#endif	


/* Addresses used to setup RAM */

/* ARM Scatter file defined Image$$<section>$$Base */

#if defined(CFG_ARM_CR4)
ASM_WORD(_sidata)
ASM_WORD(_sdata)
ASM_WORD(_edata)
ASM_WORD(_sbss)
ASM_WORD(_ebss)
/* The address of the stack to use in all modes. */
ASM_WORD(__inital_sp)
#endif

ASM_WORD(_estack)


/**
 * @brief  This is the code that gets called when the processor first
 *          starts execution following a reset event. Only the absolutely
 *          necessary set is performed, after which the application
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/
#if defined(__GNUC__)
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	
#else
	AREA	||.text||, CODE, READONLY,  ALIGN=8
	THUMB
#endif

ASM_LABEL(Reset_Handler)



#if defined(CFG_ARM_CR4)
/* Set big endian state */
	SETEND BE

/* Initialize core registers.
   This is done to avoid mismatch between lockstep CPU and ordinary CPU
*/
    mov   r0,         #0x0000
    mov   r1,         #0x0000
    mov   r2,         #0x0000
    mov   r3,         #0x0000
    mov   r4,         #0x0000
    mov   r5,         #0x0000
    mov   r6,         #0x0000
    mov   r7,         #0x0000
    mov   r8,         #0x0000
    mov   r9,         #0x0000
    mov   r10,        #0x0000
    mov   r11,        #0x0000
    mov   r12,        #0x0000
    mov   r1,         #0x03D0
    orr   r2,        r1,     #0x0001
    msr   cpsr_cxsf,  r2
    msr   spsr_cxsf,  r2
    mov   r8,         #0x0000
    mov   r9,         #0x0000
    mov   r10,        #0x0000
    mov   r11,        #0x0000
    mov   r12,        #0x0000
    orr   r12,        r1,     #0x0002
    msr   cpsr_c,     r12
    msr   spsr_cxsf,  r12
    orr   r12,        r1,     #0x0007
    msr   cpsr_c,     r12
    msr   spsr_cxsf,  r12
    orr   r12,        r1,     #0x000B
    msr   cpsr_c,     r12
    msr   spsr_cxsf,  r12
    orr   r12,        r1,     #0x0003
    msr   cpsr_c,     r12
    msr   spsr_cxsf,  r12

/* System level configuration
   This mainly involves setting instruction mode for exceptions and interrupts.
*/
    mrc   p15,0,r11,c1,c0,0       /* Read current system configuration */
    mov   r12,		  #0x40000000 /* Set THUMB instruction set mode for interrupts and exceptions */
    orr   r12, r12, r11
    mcr   p15,0,r12,c1,c0,0       /* Write new configuration */
#endif


/* Initialize stack pointers.
   This is done for all processor modes. Note that we only use one stack pointer.
   In reality this means that no mode except USER and SYS is allowed to do anythin on the stack.
   IRQ mode handles its own stack in the interrupt routine.
*/
	mov   r2,		#0xD1
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

    mov   r2,		#0xD2
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

    mov   r2,		#0xD7
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

    mov   r2,		#0xDB
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

    mov   r2,		#0xDF
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

    mov   r2,		#0xD3
    msr   cpsr_c,   r2
    ldr   sp,		=STACK_END

#if defined(CFG_ARM_CR4)
/* Initialize RAM.
   First the initialized RAM is copied from flash to RAM.
   Then the zeroed RAM is erased.
*/
	ldr	r0, =_sdata       /* r0 holds start of data in ram */
	ldr	r3, =_edata       /* r3 holds end of data in ram */
	ldr	r5, =_sidata      /* r5 start of data in flash */
	movs  r1,       #0    /* r1 is the counter */
	b	LoopCopyDataInit

CopyDataInit:
	ldr	r4, [r5, r1]          /* read current position in flash */
	str	r4, [r0, r1]          /* store current position in ram */
	adds	r1, r1, #4        /* increment counter */
    
LoopCopyDataInit:
	adds	r2, r0, r1        /* are we at the final position? */
	cmp	r2, r3                /* ... */
	bcc	CopyDataInit          /* nope, continue */

/* Fill zero areas */
	ldr	r2, =_sbss            /* r2 holds the start address */
	ldr r5, =_ebss            /* r5 holds the end address */
	bl	apa

	ldr	r2, =_sstack            /* r2 holds the start address */
	ldr r5, =_estack            /* r5 holds the end address */
	bl	LoopFillZero

#endif

	/* Enable VFP here to support memset(), memcpy() that uses 
	 * VFP instructions at startup */
	ldr 	r0, =(0xF << 20)
	mcr 	p15, 0, r0, c1, c0, 2
	
	mov 	r3, #0x40000000 
	vmsr 	FPEXC, r3

/* Call the application's entry point.*/
	mov   r2,		#0xDF
    msr   cpsr_c,   r2
    bl	init
    
	bl	main
	bx	lr

/* Zero fill the bss segment. */  
ASM_LABEL(FillZero)
	movs	r3, #0
	str	    r3, [r2], #4
    
ASM_LABEL(LoopFillZero)
	cmp	r2, r5
	bcc	FillZero
	bx  lr

	ASM_GLOBAL(__user_setup_stackheap)
ASM_LABEL(__user_setup_stackheap)
	bx  lr

#if defined(__GNUC__)
.size	Reset_Handler, .-Reset_Handler
#endif


#if defined(__ARMCC_VERSION)
	END
#endif

